<?php

/**
 * @file
 * CKEditor inline image style.
 */

/**
 * Implements hook_menu().
 */
function ckeditor_inline_image_style_menu() {
  $items = [];
  $items['admin/config/media/ckeditor_inline_image_style'] = [
    'title'            => 'Ckeditor Inline Image Style Settings',
    'type'             => MENU_NORMAL_ITEM,
    'description'      => 'ckeditor_inline_image_style settings (CKEditor, File Entity, ...)',
    'page callback'    => 'backdrop_get_form',
    'page arguments'   => ['ckeditor_inline_image_style_admin_settings'],
    'access arguments' => ['administer ckeditor_inline_image_styles'],
    'file'             => 'ckeditor_inline_image_style.admin.inc',
    'weight'           => 0,
  ];
  return $items;
}

/**
 * Implements hook_permission().
 */
function ckeditor_inline_image_style_permission() {
  return [
    'administer ckeditor_inline_image_styles' => [
      'title'       => t('Administer CKEditor inline image styles'),
      'description' => t('Administer CKEditor inline image styles'),
    ],
  ];
}

/**
 * Implements hook_config_info().
 */
function ckeditor_inline_image_style_config_info() {
  $prefixes['ckeditor_inline_image_style.settings'] = [
    'label' => t('CKEditor inline image styles settings'),
    'group' => t('Configuration'),
  ];
  return $prefixes;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node edit forms.
 */
function ckeditor_inline_image_style_form_node_form_alter(
  &$form,
  &$form_state,
  $form_id
) {
  // Assuming you want this to run on all node forms, but you might want to add more specific conditions.
  if (strpos($form_id, 'node_form') !== FALSE) {
    $config = config('ckeditor_inline_image_style.settings');
    // Add your CSS for the .ImagePreviewBox.
    backdrop_add_css(
      ckeditor_inline_image_style_css('.ImagePreviewBox'),
      'inline'
    );
    // Integrate with the WYSIWYG module, and the CKEditor module.
    $image_styles = image_styles();
    $ckeditor_mappings = $config->get(
      'ckeditor_inline_image_style_ckeditor_mappings'
    );
    $mappings = [];

    // CKEditor library expects an array of options formatted as
    // ['Display name', 'machine_name'].
    foreach ($ckeditor_mappings as $machine_name) {
      if (isset($image_styles[$machine_name])) {
        $label = $image_styles[$machine_name]['label'];
        $mappings[$machine_name]
          = $label; // Change here to use machine name as key and label as value.
      }
    }
    if (!empty($mappings)) {
      // Add an empty option at the beginning.
      $mappings = ['none' => 'Original Image'] + $mappings;
    }

    // Prepare your JavaScript settings and add them.
    backdrop_add_js([
      'ckeditor_inline_image_style' => [
        'mappings'  => $mappings,
        'label'     => $label,
        'editorCSS' => ckeditor_inline_image_style_css(),
      ],
    ], 'setting');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */

/*function ckeditor_inline_image_style_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'filter_format_editor_image_form') {
    $custom_text = t('Your custom text here.');

    // Add a markup element right after the 'alt' field
    $form['alt_custom_text'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="custom-text-after-alt">' . $custom_text . '</div>',
      // Adjust the weight to make sure it appears right after the 'alt' field
      '#weight' => $form['alt']['#weight'] + 0.001,
    );
  }
}*/

/**
 * Implements hook_form_FORM_ID_alter() for CKEditor image dialog form.
 */
function ckeditor_inline_image_style_form_filter_format_editor_image_form_alter(  &$form, $form_state) {
  // Load module configuration.
  $config = config('ckeditor_inline_image_style.settings');

  // Ensure alterations apply only when CKEditor is used.
  $format = $form_state['format'];
  if ($format->editor !== 'ckeditor') {
    return;
  }

  // Check if the custom filter is enabled for the format.
  $filter_enabled
    = !empty($format->filters['ckeditor_inline_image_style']->status);

  $values = [];
  if (isset($form_state['input']['editor_object'])) {
    $values = $form_state['input']['editor_object'];
  }
  // Fetch available image styles and prepare options for the select element.
  $image_styles = image_styles();
  $ckeditor_mappings = $config->get(
    'ckeditor_inline_image_style_ckeditor_mappings'
  );
  $options = [
    'none' => t(
      'Original Image'
    ),
  ]; // Ensures a default, non-selected option is available.

  foreach ($ckeditor_mappings as $machine_name) {
    if (isset($image_styles[$machine_name])) {
      $label = $image_styles[$machine_name]['label'];
      $options[$machine_name]
        = $label; // Use the machine name as the key for easy mapping.
    }
  }

  /*$options = array("none" => t('Original'));
  foreach (image_styles() as $name => $style) {
    $options[$name] = $style['label'];
  }*/

  // Add the select field to the form.
  $form['image_style'] = [
    '#title'              => t('Image Style'),
    '#type'               => 'select',
    '#default_value'      => isset($values['data-image-style'])
      ? $values['data-image-style'] : 'none',
    '#options'            => $options,
    '#wrapper_attributes' => ['class' => ['editor-data-image-style']],
    '#parents'            => ['attributes', 'data-image-style'],
    '#description'        => t('Choose the image style you want to apply.'),
    '#weight'             => -1, // Adjust as necessary to position the element.
    //'#access'             => $filter_enabled,
  ];
  // Adjust the AJAX callback for the form submission.
  /*$form['actions']['submit']['#ajax']['callback']
    = 'ckeditor_inline_image_style_format_editor_dialog_save';*/
}

/**
 * Custom save function for the image dialog form.
 */
/**
 * Custom AJAX callback function for the CKEditor image dialog form submission.
 */
/*function ckeditor_inline_image_style_format_editor_dialog_save($form, &$form_state) {
  $return = filter_format_editor_dialog_save($form, $form_state);
  if (isset($return['#commands'][0]['values']['attributes']['data-file-id'])) {
    $fid = $return['#commands'][0]['values']['attributes']['data-file-id'];
    if (!empty($fid)) {
      $style_name
        = $return['#commands'][0]['values']['attributes']['data-image-style'];

      $file = file_load($fid);
      dpm($file);
      $path = ($style_name == 'none') ? file_create_url($file->uri)
        : image_style_url($style_name, $file->uri);
      dpm($path);
      // Parse the URL to extract its components
      $urlComponents = parse_url($path);

      // Extract the path component, which is the relative URL
      $relativePath = $urlComponents['path'];
      dpm($relativePath);

      if ($return['#commands'][0]['values']['attributes']['src'] != $relativePath) {
        $form_state['values']['attributes']['src'] = $relativePath;
        $return['#commands'][0]['values']['attributes']['src'] = $relativePath;
        // clear image width & height if style has changed, but not size.
        // questionable...

        if ($form['image_style']['#default_value'] != 'none'
          && $form_state['values']['attributes']['data-image-style']
          != $form['image_style']['#default_value']
          && $form_state['values']['attributes']['width']
          == $form['size']['width']['#default_value']
          && $form_state['values']['attributes']['height']
          == $form['size']['height']['#default_value']
        ) {
          $form_state['values']['attributes']['width'] = '';
          $return['#commands'][0]['values']['attributes']['width'] = '';
          $form_state['values']['attributes']['height'] = '';
          $return['#commands'][0]['values']['attributes']['height'] = '';
        }
      }
    }
  }
  dpm($form_state['values']);
  return $return;
}*/

/**
 * Generate css to handle more realistic display of image styles.
 */
function ckeditor_inline_image_style_css($prefix = '') {
  $config = config('ckeditor_inline_image_style.settings');
  $image_styles = image_styles();
  $ckeditor_mappings = $config->get(
    'ckeditor_inline_image_style_ckeditor_mappings'
  );
  $mappings = [];
  // CKEditor library expects an array of options formatted as
  // ['Display name', 'machine_name'].
  foreach ($ckeditor_mappings as $machine_name) {
    if (array_key_exists($machine_name, $image_styles)) {
      $dimensions = [
        'width'  => 1000,
        'height' => 1000,
      ];

      // Transform dimensions.
      image_style_transform_dimensions($machine_name, $dimensions);

      // Add unit if needed.
      if (strpos($dimensions['width'], '%') === FALSE) {
        $dimensions['width'] .= 'px';
      }
      if (strpos($dimensions['height'], '%') === FALSE) {
        $dimensions['height'] .= 'px';
      }

      $mappings[$machine_name] = $prefix . ' img[data-image-style="'
        . $machine_name . '"] {';
      $mappings[$machine_name] .= ' width: ' . $dimensions['width'] . ';';
      $mappings[$machine_name] .= ' height: ' . $dimensions['height'] . ';';
      $mappings[$machine_name] .= '}';
    }
  }
  return implode("\n", $mappings);
}

/**
 * Implements hook_ckeditor_plugins().
 *
 * Registers a CKEditor plugin to allow selection of image styles within
 * CKEditor, without adding a button to the toolbar.
 */
/*function ckeditor_inline_image_style_ckeditor_plugins() {
  $module_path = backdrop_get_path('module', 'ckeditor_inline_image_style');
  $plugin_path = $module_path . '/ckeditor/plugins/';
  $plugins['ckeditor_inline_image_style_ckeditor'] = [
    'path'             => $plugin_path,
    'file'             => 'plugin.js',
    'internal'         => FALSE,
    'enabled callback' => 'ckeditor_inline_image_style_plugin_check',
  ];
  return $plugins;
}*/

/**
 * Callback to enable ckeditor inline image style plugin.
 */
/*function ckeditor_inline_image_style_plugin_check($format, $plugin_name) {
  return $format->editor_settings['ckeditor_inline_image_style_ckeditor']['status'];
}*/

/**
 * Implements hook_ckeditor_plugins_alter().
 */
function ckeditor_inline_image_style_ckeditor_plugins_alter(&$plugins) {
  $path = backdrop_get_path('module', 'ckeditor_inline_image_style');
  $image_prefix = backdrop_get_path('module', 'ckeditor') . '/images/buttons/';

  // The backdropimage plugin replaces normal image functionality.
  $plugins['backdropimage'] = array(
    'path' => $path . '/ckeditor/plugins/backdropimage',
    'file' => 'plugin.js',
    'css' => array($path . '/css/ckeditor.css'),
    'buttons' => array(
      'BackdropImage' => array(
        'label' => t('Image'),
        'required_html' => array(
          array(
            'tags' => array('img'),
            'attributes' => array('src', 'alt', 'data-file-id', 'data-align'),
          ),
        ),
        'image' => $image_prefix . 'image.png',
      ),
    ),
  );

  // The backdropcaption plugin provides consistent behaviors for image captions.
  $plugins['backdropimagecaption'] = array(
    'path' => $path . '/ckeditor/plugins/backdropimagecaption',
    'file' => 'plugin.js',
    'css' => array($path . '/css/ckeditor.css'),
    'enabled callback' => 'ckeditor_image_plugin_check',
    'required_html' => array(
      array(
        'tags' => array('img'),
        'attributes' => array('data-caption'),
      ),
      array(
        'tags' => array('figure', 'figcaption'),
        'attributes' => array('src', 'alt', 'class', 'data-placeholder'),
      ),
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add settings for Ckeditor Inline Image Style plugin.
 */
function ckeditor_inline_image_style_form_filter_admin_format_form_alter(&$form, $form_state) {
  // Defaults.
  $settings
    = isset($form_state['format']->editor_settings['ckeditor_inline_image_style_ckeditor'])
    ? $form_state['format']->editor_settings['ckeditor_inline_image_style_ckeditor']
    : [];
  $settings += [
    'status' => FALSE,
  ];

  $form['editor_settings']['plugins']['ckeditor_inline_image_style_ckeditor']
    = [
    '#type'       => 'fieldset',
    '#title'      => t("Inline Image Syles"),
    '#tree'       => TRUE,
    '#attributes' => [
      'class' => ['data-image-style'],
    ],
    '#parents'    => [
      'editor_settings',
      'ckeditor_inline_image_style_ckeditor',
    ],
  ];

  $form['editor_settings']['plugins']['ckeditor_inline_image_style_ckeditor']['status']
    = [
    '#type'          => 'checkbox',
    '#title'         => t("Enable"),
    '#default_value' => $settings['status'],
    '#description'   => t("Select image style in CKEditor."),
    '#attributes'    => [
      'ckeditorInlineImageSyles' => 'status',
    ],
  ];
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
/*function ckeditor_inline_image_style_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    if (!isset($settings['extraAllowedContent'])) {
      $settings['extraAllowedContent'] = array(
        'img[src,title,alt,style,width,height,class,hspace,vspace,view_mode,format,fid,data-picture-mapping,data-picture-group,data-picture-align,data-image-style]',
      );
    }
    else {
      // @todo: try finding the img entry and add data- attributes if needed.
    }
  }
}*/

/**
 * Implements hook_filter_info().
 */
function ckeditor_inline_image_style_filter_info() {
  $filters = [];
  $filters['ckeditor_inline_image_style'] = [
    'title'            => t('Make images support image styles'),
    'description'      => t(
      'Replace img tags with markup that contains the selected image style.'
    ),
    'process callback' => '_ckeditor_inline_image_style_filter_process',
  ];

  return $filters;
}

/**
 * Process callback for inline image filter.
 */
function _ckeditor_inline_image_style_filter_process($text) {
  // Find all img tags with a data-image-style attribute.
  preg_match_all('/<img [^>]*data-image-style\s*=\s*["\'][^>]*>/i', $text, $images);
  if (!empty($images[0])) {
    foreach ($images[0] as $image) {
      $image_render_array = _ckeditor_inline_image_style_filter_prepare_image($image);
      if (!$image_render_array) {
        continue;
      }
      dpm($image_render_array);
      // Extract the styled image URL.
      $styled_image_url = $image_render_array['#path'];

      // Replace only the src attribute within the original image tag.
      $new_image = preg_replace('/src="[^"]*"/i', 'src="' . check_plain($styled_image_url) . '"', $image);

      // Replace the original img tag with the new one in the text.
      $text = str_replace($image, $new_image, $text);
    }
  }

  return $text;
}



/**
 * Prepares an image.
 */
function _ckeditor_inline_image_style_filter_prepare_image($image) {
  // Make sure the closing tag is right.
  $image = str_replace('/>', '>', $image);
  $image = str_replace('>', ' />', $image);
  $image = str_replace("&nbsp;", '', $image);
  $image = htmlspecialchars($image);

  // Parse the tag as XML.
  $xml = simplexml_load_string(
    '<image>' . html_entity_decode($image, ENT_QUOTES, "utf-8") . '</image>'
  );

  if (isset($xml->img[0]) && is_object($xml->img[0])) {
    $attributes = [];
    foreach ($xml->img[0]->attributes() as $a => $b) {
      $attributes[$a] = (string) $b;
    }
  }

  $image_style = FALSE;
  if (isset($attributes['data-image-style'])) {
    $image_style = $attributes['data-image-style'];
  }
  if (!$image_style) {
    return;
  }

  $image_styles = image_styles();
  if (!isset($image_styles[$image_style])) {
    return;
  }
  // Make sure we have a src attribute.
  if (!isset($attributes['src'])) {
    return FALSE;
  }

  $src = $attributes['src'];
  unset($attributes['src']);

  $alt = isset($attributes['alt']) ? $attributes['alt'] : '';
  unset($attributes['alt']);

  $title = isset($attributes['title']) ? $attributes['title'] : '';
  unset($attributes['title']);

  // Ensure that class attributes are properly split into an array.
  if (!empty($attributes['class']) && !is_array($attributes['class'])) {
    $attributes['class'] = array_filter(explode(' ', $attributes['class']));
  }

  // Make sure we have a valid image URI.
  $uri = ckeditor_inline_image_style_image_uri($src);
  if (!$uri) {
    return FALSE;
  }


  $image_info = image_get_info($uri);

  if (!$image_info) {
    // It's not an image.
    return FALSE;
  }

  if ($image_style != 'none') {
    $styled_image_url = image_style_url($image_style, $uri);
  } else {
    $styled_image_url = file_create_url($uri);
  }
  // Construct the image render array.
  $image_render_array = [
    '#theme'      => 'image_style',
    '#style_name' => $image_style,
    '#path'       => $styled_image_url,
    '#width'      => $image_info['width'],
    '#height'     => $image_info['height'],
    '#alt'        => $alt,
    '#title'      => $title,
    '#attributes' => [
        'data-image-style' => $image_style,
      ] + $attributes,
  ];

  return $image_render_array;
}

/**
 * Helper function to figure out the uri of an image source.
 *
 * @param string $src
 *   Image src starting with http://, https://, or root relative /.
 */
function ckeditor_inline_image_style_image_uri($src) {
  foreach (
    module_implements('ckeditor_inline_image_style_image_uri') as $module
  ) {
    $function = $module . '_ckeditor_inline_image_style_image_uri';
    if ($uri = $function($src)) {
      $uri = file_stream_wrapper_uri_normalize($uri);
      return urldecode($uri);
    }
  }
  return FALSE;
}

/**
 * Implements hook_ckeditor_inline_image_style_image_uri().
 */
function ckeditor_inline_image_style_ckeditor_inline_image_style_image_uri($src
) {
  global $base_path;
  $uri = '';
  // Prepare the src by removing http:// or https://.
  $src = parse_url($src, PHP_URL_PATH);
  // Remove leading or trailing slashes.
  $src = trim($src, '/');

  // List all visible stream wrappers.
  $visible_stream_wrappers = array_intersect_key(
    file_get_stream_wrappers(STREAM_WRAPPERS_WRITE),
    file_get_stream_wrappers(STREAM_WRAPPERS_VISIBLE)
  );
  $needles = [];
  $matches = [];
  foreach ($visible_stream_wrappers as $scheme => $data) {
    $class = file_stream_wrapper_get_class($scheme);
    $stream_wrapper = new $class();
    // Trim leading or trailing slashes since the Directory could be root
    // relative.
    if (method_exists($stream_wrapper, 'getDirectoryPath')) {
      $needles[$scheme] = trim(
        $base_path . $stream_wrapper->getDirectoryPath(),
        '/'
      );

      // Check whether the file stream directory is at the beginning of
      // the image src. Use === since strpos could return false.
      if (!empty($needles[$scheme]) && strpos($src, $needles[$scheme]) === 0) {
        $matches[$scheme] = $needles[$scheme];
      }
    }
  }

  // No file stream wrapper is starting with the image src.
  // So it's not a public file.
  if (empty($matches)) {
    // Check for managed/private file with relative path like system/files/..
    $src_exploded = explode('/', $src);
    if ($src_exploded[0] == 'system' && $src_exploded[1] == 'files') {
      // Managed/private file recognized.
      // Check for image style derivatives.
      if ($src_exploded[2] == 'styles') {
        // Image style recognized.
        $unwanted_part = 'system/files/styles/' . $src_exploded[3]
          . '/private/';
        $uri = str_replace($unwanted_part, 'private://', $src);
        $uri = file_stream_wrapper_uri_normalize($uri);
        return urldecode($uri);
      }
      else {
        // No image style recognized; must be an original.
        $unwanted_part = 'system/files/';
        $uri = str_replace($unwanted_part, 'private://', $src);
        $uri = file_stream_wrapper_uri_normalize($uri);
        return urldecode($uri);
      }
    }
    else {
      // Can't figure out the Backdrop uri.
      return FALSE;
    }
  }

  // If one file scheme directory is a subdirectory of another file
  // scheme directory, choose the longer one. This issue is possible with
  // the following scenario:
  // public file dir: /sites/default/files/
  // private file dir: /sites/default/files/private/
  // image src: /sites/default/files/private/the-image.jpg
  // In this example, the intended scheme would be 'private'.
  if (empty($matches)) {
    // Can't figure out the Backdrop uri.
    return FALSE;
  }

  // Find the length of each matching directory path.
  $lengths = array_map('strlen', $matches);

  // Determine the key of the longest one.
  $the_scheme = array_search(max($lengths), $lengths);

  // Construct the Backdrop uri.
  $uri = $the_scheme . '://' . str_replace($matches[$the_scheme], '', $src);
  return $uri;
}
